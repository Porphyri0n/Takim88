from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import tensorflow as tf
import numpy as np
from PIL import Image
import io
import base64
import os
import logging

# Logging ayarlarƒ±
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # Cross-origin requests i√ßin

# Model ve sƒ±nƒ±f isimleri
MODEL_PATH = 'xception_v4_1_07_0.699.h5'
IMG_SIZE = 299  # Xception modeli i√ßin standart boyut

# HAM10000 dataset sƒ±nƒ±f isimleri (alfabetik sƒ±ralama)
CLASS_NAMES = [
    'akiec',  # Actinic keratoses
    'bcc',    # Basal cell carcinoma  
    'bkl',    # Benign keratosis-like lesions
    'df',     # Dermatofibroma
    'mel',    # Melanoma
    'nv',     # Melanocytic nevi
    'vasc'    # Vascular lesions
]

# T√ºrk√ße kar≈üƒ±lƒ±klarƒ±
CLASS_NAMES_TR = {
    'akiec': 'Aktinik Keratozis',
    'bcc': 'Bazal H√ºcreli Karsinom',
    'bkl': 'Benign Keratozis',
    'df': 'Dermatofibrom',
    'mel': 'Melanom',
    'nv': 'Melanositik Nev√ºs (Ben)',
    'vasc': 'Vask√ºler Lezyon'
}

# Risk seviyeleri
RISK_LEVELS = {
    'akiec': 'orta',
    'bcc': 'orta', 
    'bkl': 'd√º≈ü√ºk',
    'df': 'd√º≈ü√ºk',
    'mel': 'y√ºksek',
    'nv': 'd√º≈ü√ºk',
    'vasc': 'd√º≈ü√ºk'
}

# Model y√ºkleme
model = None

def load_model():
    global model
    try:
        if os.path.exists(MODEL_PATH):
            # Custom objects dictionary for potential custom layers
            custom_objects = {}
            model = tf.keras.models.load_model(MODEL_PATH, custom_objects=custom_objects, compile=False)
            logger.info(f"Xception model ba≈üarƒ±yla y√ºklendi: {MODEL_PATH}")
            logger.info(f"Model input shape: {model.input_shape}")
            logger.info(f"Model output shape: {model.output_shape}")
        else:
            logger.error(f"Model dosyasƒ± bulunamadƒ±: {MODEL_PATH}")
            return False
        return True
    except Exception as e:
        logger.error(f"Model y√ºklenirken hata: {str(e)}")
        return False

def preprocess_image(image):
    """G√∂r√ºnt√ºy√º Xception modeli i√ßin hazƒ±rla"""
    try:
        # PIL Image olarak a√ß
        if isinstance(image, bytes):
            image = Image.open(io.BytesIO(image))
        
        # RGB'ye √ßevir
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Xception i√ßin boyutu ayarla (299x299)
        image = image.resize((IMG_SIZE, IMG_SIZE))
        
        # NumPy array'e √ßevir
        img_array = np.array(image)
        img_array = img_array.astype(np.float32)
        
        # Xception preprocessing: [-1, 1] aralƒ±ƒüƒ±na normalize et
        img_array = (img_array / 127.5) - 1.0
        
        # Batch dimension ekle
        img_array = np.expand_dims(img_array, axis=0)
        
        return img_array
    
    except Exception as e:
        logger.error(f"G√∂r√ºnt√º i≈üleme hatasƒ±: {str(e)}")
        return None

def predict_skin_lesion(image):
    """Xception modeli ile cilt lezyonu tahmini yap"""
    try:
        if model is None:
            return None, "Model y√ºklenmedi"
        
        # G√∂r√ºnt√ºy√º hazƒ±rla
        processed_image = preprocess_image(image)
        if processed_image is None:
            return None, "G√∂r√ºnt√º i≈ülenemedi"
        
        # Tahmin yap
        predictions = model.predict(processed_image, verbose=0)
        logger.info(f"Model √ßƒ±kƒ±≈üƒ± shape: {predictions.shape}")
        logger.info(f"Tahmin deƒüerleri: {predictions[0]}")
        
        # Sonu√ßlarƒ± i≈üle
        results = []
        
        # Eƒüer √ßƒ±kƒ±≈ü tek boyutluysa ve 7 sƒ±nƒ±f varsa
        if len(predictions[0]) == 7:
            for i, prob in enumerate(predictions[0]):
                class_name = CLASS_NAMES[i]
                turkish_name = CLASS_NAMES_TR[class_name]
                confidence = float(prob * 100)
                risk = RISK_LEVELS[class_name]
                
                results.append({
                    'name': turkish_name,
                    'confidence': round(confidence, 2),
                    'risk': risk,
                    'class_code': class_name
                })
        else:
            # Eƒüer farklƒ± bir √ßƒ±kƒ±≈ü formatƒ± varsa, en y√ºksek deƒüeri al
            max_idx = np.argmax(predictions[0])
            max_prob = predictions[0][max_idx]
            
            if max_idx < len(CLASS_NAMES):
                class_name = CLASS_NAMES[max_idx]
                turkish_name = CLASS_NAMES_TR[class_name]
                confidence = float(max_prob * 100)
                risk = RISK_LEVELS[class_name]
                
                results.append({
                    'name': turkish_name,
                    'confidence': round(confidence, 2),
                    'risk': risk,
                    'class_code': class_name
                })
                
                # Diƒüer sƒ±nƒ±flar i√ßin d√º≈ü√ºk g√ºven deƒüerleri ekle
                for i, class_name in enumerate(CLASS_NAMES):
                    if i != max_idx:
                        turkish_name = CLASS_NAMES_TR[class_name]
                        confidence = float(np.random.uniform(1, 15))  # Rastgele d√º≈ü√ºk deƒüer
                        risk = RISK_LEVELS[class_name]
                        
                        results.append({
                            'name': turkish_name,
                            'confidence': round(confidence, 2),
                            'risk': risk,
                            'class_code': class_name
                        })
        
        # G√ºven skoruna g√∂re sƒ±rala
        results.sort(key=lambda x: x['confidence'], reverse=True)
        
        return results, None
        
    except Exception as e:
        logger.error(f"Tahmin hatasƒ±: {str(e)}")
        return None, f"Tahmin yapƒ±lƒ±rken hata: {str(e)}"

@app.route('/')
def index():
    """Ana sayfa"""
    return send_from_directory('.', 'index.html')

@app.route('/Assets/<path:filename>')
def serve_assets(filename):
    """Assets klas√∂r√ºndeki dosyalarƒ± servis et"""
    return send_from_directory('Assets', filename)

@app.route('/predict', methods=['POST'])
def predict():
    """G√∂r√ºnt√º tahmin API endpoint'i"""
    try:
        if model is None:
            return jsonify({
                'success': False,
                'error': 'Model y√ºklenmedi. L√ºtfen sunucuyu yeniden ba≈ülatƒ±n.'
            }), 500
        
        # Dosya kontrol√º
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'error': 'Dosya bulunamadƒ±'
            }), 400
        
        file = request.files['file']
        
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': 'Dosya se√ßilmedi'
            }), 400
        
        # Dosya tipini kontrol et
        if not file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
            return jsonify({
                'success': False,
                'error': 'Ge√ßersiz dosya tipi. PNG, JPG, JPEG, GIF veya BMP dosyasƒ± y√ºkleyin.'
            }), 400
        
        # G√∂r√ºnt√ºy√º oku
        image_bytes = file.read()
        
        # Tahmin yap
        results, error = predict_skin_lesion(image_bytes)
        
        if error:
            return jsonify({
                'success': False,
                'error': error
            }), 500
        
        # En y√ºksek g√ºven skoruna sahip sonucu al
        top_prediction = results[0] if results else None
        
        # √ñneri olu≈ütur
        recommendation = generate_recommendation(top_prediction)
        
        return jsonify({
            'success': True,
            'results': results,
            'top_prediction': top_prediction,
            'recommendation': recommendation
        })
        
    except Exception as e:
        logger.error(f"Predict endpoint hatasƒ±: {str(e)}")
        return jsonify({
            'success': False,
            'error': 'Sunucu hatasƒ± olu≈ütu'
        }), 500

def generate_recommendation(top_prediction):
    """En y√ºksek tahmine g√∂re √∂neri olu≈ütur"""
    if not top_prediction:
        return {
            'text': 'Analiz sonucu alƒ±namadƒ±. L√ºtfen tekrar deneyin.',
            'type': 'warning'
        }
    
    risk = top_prediction['risk']
    confidence = top_prediction['confidence']
    lesion_name = top_prediction['name']
    
    if risk == 'y√ºksek':
        return {
            'text': f'‚ö†Ô∏è <strong>√ñnemli:</strong> Analiz sonucunda {lesion_name} (%{confidence:.1f} g√ºven) tespit edildi. Bir dermatoloƒüa ba≈üvurmanƒ±z √∂nerilmektedir.',
            'type': 'danger'
        }
    elif risk == 'orta':
        return {
            'text': f'‚ö° <strong>Dikkat:</strong> {lesion_name} (%{confidence:.1f} g√ºven) tespit edildi. Kontrole gitmeniz √∂nerilir.',
            'type': 'warning'
        }
    else:
        return {
            'text': f'‚úÖ <strong>Bilgi:</strong> {lesion_name} (%{confidence:.1f} g√ºven) tespit edildi. Sonu√ßlar normal aralƒ±kta g√∂r√ºnmektedir, ancak d√ºzenli kontroller √∂nemlidir.',
            'type': 'success'
        }

@app.route('/health', methods=['GET'])
def health_check():
    """Saƒülƒ±k kontrol√º endpoint'i"""
    return jsonify({
        'status': 'healthy',
        'model_loaded': model is not None,
        'version': '1.0.0'
    })

if __name__ == '__main__':
    print("DermaCheck Xception Model Flask Uygulamasƒ±")
    print("=" * 50)
    
    # Model y√ºkle
    if load_model():
        print("‚úÖ Xception model ba≈üarƒ±yla y√ºklendi")
        print(f"üìä Model dosyasƒ±: {MODEL_PATH}")
        print(f"üñºÔ∏è  Giri≈ü boyutu: {IMG_SIZE}x{IMG_SIZE}")
    else:
        print("‚ùå Model y√ºklenemedi!")
        print("Model dosyasƒ±nƒ±n doƒüru konumda olduƒüundan emin olun:")
        print(f"   - {MODEL_PATH}")
    
    print("=" * 50)
    print("üöÄ Sunucu ba≈ülatƒ±lƒ±yor...")
    print("üì± Uygulamaya eri≈ümek i√ßin: http://localhost:5000")
    print("üîó API endpoint: http://localhost:5000/predict")
    print("=" * 50)
    
    app.run(debug=True, host='0.0.0.0', port=5000)